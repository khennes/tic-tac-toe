(function() {
    'use strict';
    window.onload = initialize;

    /**
     * Define global variables.
     **/

    var game = false,
        currentPlayer,
        computer = 'O',
        user = 'X',
        draw = 'draw',
        firstPlay = computer,
        gamestate,
        movesMade = {},
        gameboard = document.getElementById('gameboard'),
        userMessage = document.getElementById('message'),
        possibleWins = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6],
                        [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6] ],
        SQUARES = gameboard.childNodes.length;


    /**
     * Define gameboard's initial (empty) state;
     **/

    function initialize() {
        movesMade[computer] = [];
        movesMade[user] = [];
        currentPlayer = null;

        // represent current state of gameboard with 'X', 'O', and '-'
        gamestate = ['-', '-', '-', '-', '-', '-', '-', '-', '-'];
        userMessage.innerHTML = "Click 'Play game' to start";

        // clear the gameboard DOM element
        for (var i = 0; i < SQUARES; i++) {
            gameboard.childNodes[i].innerHTML = "";
        }
    }
    

    /**
     * Allow user to reset game by clicking "Restart".
     **/

    var restartButton = document.getElementById('restart');
    restartButton.addEventListener('click', function(e) {
        game = false;
        window.setTimeout(initialize, 700);
        if (firstPlay == computer) firstPlay = user;
        else firstPlay = computer;
    });


    /**
     * Start game when user clicks 'Play game'.
     **/

    var playButton = document.getElementById('play');
    playButton.addEventListener('click', function(e) {
        if (game === false && currentPlayer === null) {
            game = true;
            if (firstPlay === computer) {
                currentPlayer = computer;
                userMessage.innerHTML = "";
                window.setTimeout(seedBoard, 400);
            } else if (firstPlay === user) {
                currentPlayer = user;
                userMessage.innerHTML = "Your move!";
            }
        }
    });


    /**
     * Computer pseudorandomly chooses a corner or middle square to start.
    */

    function seedBoard() {
        var randomCorner = Math.floor(Math.random()*3),
            corners = {
                0: 's0',
                1: 's2',
                2: 's6',
                3: 's8'
            },
            firstMove = document.getElementById(corners[randomCorner]);
        makeMove(computer, firstMove);
        currentPlayer = user;
    }


    /**
     * Implement current player's move:
     * (1) Print to the gameboard DOM element
     * (2) Update global gamestate 
     * (3) Add square to player's list of moves made 
     *
     * If player has made at least 3 moves, call checkWinner() 
     * to check the gameboard for a possible win.
     **/

    function makeMove(player, nextMove) {
        var winner,
            moveIndex;

        moveIndex = parseInt(nextMove.id.replace('s', ''));
        nextMove.innerHTML = player;
        gamestate[moveIndex] = player;
        movesMade[player].push(moveIndex);

        if (movesMade[player].length >= 3) {
            winner = checkWinner(gamestate);
            if (winner) endGame(winner);
        }
    }


    /**
     * Event delegation: Listen for user's move.
     **/

    gameboard.addEventListener('click', function(e) {
        if (e.target && currentPlayer === user) {
            userMessage.innerHTML = "";
            var nextMove = document.getElementById(e.target.id),
                openSquares = getOpenSquares(gamestate),
                moveIndex = nextMove.id.replace('s', '');

            if (gamestate[moveIndex] === '-') {
                makeMove(user, nextMove);
                currentPlayer = computer;
                computerMove();
            }
        }
    });


    /**
     * Return an array of available moves.
     * @param: either the global gamestate or a speculative gamestate
     * generated by the negamax() function.
     **/

    function getOpenSquares(currentGamestate) {
        var i, openSquares = [];

        for (i = 0; i < SQUARES; i++) {
            if (currentGamestate[i] === "-") {
                openSquares.push(i);
            }
        }
        return openSquares;
    }


    /**
     * Check gameboard for a winning three-in-a-row.
     *
     * Loop through the 8 possible winning triplets, where 'a' is the first
     * square in a winning triplet, 'b' is the second square, & 'c' is the third.
     *
     * If a winner is found (ie, all three squares are occupied by either
     * an 'X' or an 'O'), return 'computer' or 'user' (whether or not the 
     * gameboard is full). If the gameboard is full and no winner is found, 
     * return 'draw'. Otherwise, the function returns no value & the game continues.
     **/

    function checkWinner(currentGamestate) {
        var a, b, c, win,
            WINS = possibleWins.length,
            openSquares;

        for (win = 0; win < WINS; win++) {
            a = currentGamestate[possibleWins[win][0]];
            b = currentGamestate[possibleWins[win][1]];
            c = currentGamestate[possibleWins[win][2]];

            if (a === b && a === c && a === computer) {
                return computer;
            } else if (a === b && a === c && a === user) {
                return user;
            }
        }
        openSquares = getOpenSquares(currentGamestate);
        if (openSquares.length === 0) {
            return draw;
        }
        return null;
    }


    /**
     * Report game result to user.
     *
     * @param: return value of checkWinner() function.
     **/

    function endGame(result) {
        game = false;
        if (result === computer) {
            userMessage.innerHTML = "Game over. You lose :)";
        } else if (result === user) {
            userMessage.innerHTML = "Game over. You win :(";
        } else if (result === draw) {
            userMessage.innerHTML = "Game over. It's a draw.";
        }
    }
    

    /**
     * Generate Computer's next move by invoking negamax(). 
     *
     * Fetch a list of open squares and create a copy of the global
     * gamestate array. For each square, make the move and call negamax() on it,
     * then undo the move. Then, make the move with the best score.
     **/

    function computerMove() {
        var i,
            winner,
            openSquares,
            OPEN,
            gamestateCopy,
            score,
            bestScore = -9999,
            bestMove = null,
            nextMove;

        // check for a winner or tie. If neither, continue.
        winner = checkWinner(gamestate);
        if (winner) endGame(winner);

        else {
            openSquares = getOpenSquares(gamestate);
            OPEN = openSquares.length;
            gamestateCopy = gamestate;  // make local copy of gameboard

            for (i = 0; i < OPEN; i++) {

                // make speculative move
                gamestateCopy[openSquares[i]] = computer;

                // compute score & append to 'scores' 
                score = negamax(gamestateCopy, computer);
                console.log(openSquares[i] + ": " + score);

                // undo speculative move
                gamestateCopy[openSquares[i]] = '-';

                if (score > bestScore) {
                    bestScore = score;
                    bestMove = openSquares[i];
                }
            }

            nextMove = document.getElementById('s' + bestMove);
            window.setTimeout(makeMove, 800, computer, nextMove);
            currentPlayer = user;
        }
    }


    /**
     * Negamax algorithm:
     * Calculate the utility of each available square.
     *
     * Base case: There are no plies left to explore if checkWinner() 
     * returns a winner or a draw.
     * 
     * Otherwise, negamax() calls itself again: for each possible speculative 
     * move, it marks the board, recurses, then undoes the move, returning the 
     * highest score found.
     **/
 
    function negamax(gamestateCopy, player) {
        var i,
            winner,
            score,
            bestScore = 9999,
            possibleMoves = [],
            MOVES;

        winner = checkWinner(gamestateCopy);
        if (winner !== null) {
            if (winner === player) return 1;
            else if (winner === draw) return 0;
            else return -1;
        } 

        possibleMoves = getOpenSquares(gamestateCopy);
        MOVES = possibleMoves.length;

        // toggle between players
        if (player === computer) player = user;
        else player = computer;

        // make each speculative move, recurse, & undo move
        for (i = 0; i < MOVES; i++) {
            gamestateCopy[possibleMoves[i]] = player;
            score = -negamax(gamestateCopy, player);
            gamestateCopy[possibleMoves[i]] = '-';

            if (score < bestScore) {
                bestScore = score;
            }
        }
        return bestScore;
    }
}())
